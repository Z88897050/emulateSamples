package com.handler;

import com.jdbc.bean.WrapConnect;
import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandlerContext;

import static com.handler.IOHandler.*;

import java.sql.SQLException;

public class ConnectHandler {

    public static void handler(WrapConnect connect, ByteBuf src, ChannelHandlerContext out) throws SQLException {
        String mName = readByteLen(src);
        if ("setAutoCommit".equals(mName)) {
            String bool = readByteLen(src);
            connect.setAutoCommit("true".equals(bool));
            out.write(writeByte(OK));
        } else if ("setUser".equals(mName)) {
            String name = readByteLen(src);
            connect.setUser(name);
            out.write(writeByte(OK));
        } else if ("commit".equals(mName)) {
            connect.commit();
            out.write(writeByte(OK));
        } else if ("rollback".equals(mName)) {
            connect.rollback();
            out.write(writeByte(OK));
        } else if ("createStatement".equals(mName)) {
            short pc = src.readUnsignedByte();
            String stmtId;
            if (0 == pc) {
                stmtId = connect.createStatement();
            } else if (2 == pc) {
                int resultSetType = src.readInt();
                int resultSetConcurrency = src.readInt();
                stmtId = connect.createStatement(resultSetType, resultSetConcurrency);
            } else if (3 == pc) {
                int resultSetType = src.readInt();
                int resultSetConcurrency = src.readInt();
                int resultSetHoldability = src.readInt();
                stmtId = connect.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
            } else throw new SQLException("createStatement param num[" + pc + "] is not exist");
            out.write(writeShortStr(OK, stmtId));
        } else if ("prepareStatement".equals(mName)) {
            short pc = src.readUnsignedByte();
            String stmtId;
            String sql = readIntLen(src);
            if (1 == pc) stmtId = connect.prepareStatement(sql);
            else if (2 == pc) {
                int arrSize = src.readUnsignedShort();
                short type = src.readUnsignedByte();
                if (0 == arrSize) {
                    if (0 != type) throw new SQLException("createPreparedStatement[autoGeneratedKeys] type[" +
                            type + "] error");
                    stmtId = connect.createPreparedStatement(sql, src.readInt());
                } else {
                    if (0 == type) {
                        int[] columnIndexes = readInt(arrSize, src);
                        stmtId = connect.createPreparedStatement(sql, columnIndexes);
                    } else if (1 == type) {
                        String[] columnNames = readShortLen(arrSize, src);
                        stmtId = connect.createPreparedStatement(sql, columnNames);
                    } else throw new SQLException("createPreparedStatement[array] type[" + type + "] error");
                }
            } else if (3 == pc) {
                int resultSetType = src.readInt();
                int resultSetConcurrency = src.readInt();
                stmtId = connect.createPreparedStatement(sql, resultSetType, resultSetConcurrency);
            } else if (4 == pc) {
                int resultSetType = src.readInt();
                int resultSetConcurrency = src.readInt();
                int resultSetHoldability = src.readInt();
                stmtId = connect.createPreparedStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
            } else throw new SQLException("createPreparedStatement methodLength[" + pc + "] is not exit");
            out.write(writeShortStr(OK, stmtId));
        } else throw new SQLException("connectMethod[" + mName + "] is not support");
    }
}
